#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT 
# Author: 0saga0ground
# Youtube Channel: https://goo.gl/fvkdwm 
#=================================================

name: Build_x86_64

on: 
  release:
    types: [published]

  push:
    branches: 
      - master 

  #schedule:
  #  - cron: 0 8 * * 5
  
  #watch:
  #  types: [started]

env:
  TZ: Asia/Shanghai

jobs:
  build:
    #runs-on: Ubuntu-22.04
    runs-on: ubuntu-latest
    #runs-on: ubuntu-18.04
    
    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [Lean]
        
    steps:
    - name: Checkout
      #uses: actions/checkout@main
      uses: actions/checkout@v3

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
        git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev
        sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android*
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"

    - name: 设置当前的日期
      id: date
      run: |
        echo "date=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        echo "date4=$(date +'%m.%d.%H')" >> $GITHUB_ENV
        VERSION="$(echo "${{github.event.action}}" | grep -Eo " [0-9.]+" | sed -e 's/ //')" || true
        [ "$VERSION" ] && echo "VERSION=$VERSION" >> $GITHUB_ENV || echo "VERSION=$(date +'%m.%d')" >> $GITHUB_ENV

    - name: Clone source code
      env: 
        REPO_URL: https://github.com/opwt/lede.git
        REPO_BRANCH: master
      run: |
       git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
       cd openwrt
       sed -i '$a src-git smpackage https://github.com/opwt/small-package' feeds.conf.default
       sed -i '$a src-git kenzo https://github.com/opwt/openwrt-packages' feeds.conf.default
       sed -i '$a src-git small https://github.com/opwt/small' feeds.conf.default
       git clone https://github.com/opwt/luci-theme-atmaterial package/openwrt-packages

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a    

    - name: 自定义配置 ${{matrix.target}}
      env:
        CONFIG_FILE: '${{matrix.target}}.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x ./customize.sh && ./customize.sh
        cd openwrt
        sed -i 's/192.168.1.1/10.10.10.9/g' package/base-files/files/bin/config_generate
        cp -f feeds/smpackage/diy/default-settings package/lean/default-settings/files/zzz-default-settings
        sed -i 's/v$date1/Nov/g' package/lean/default-settings/files/zzz-default-settings
        cp -f feeds/smpackage/diy/banner package/base-files/files/etc/banner
        sed -i 's/%D %V, %C/openwrt Nov by kenzo/g' package/base-files/files/etc/banner
        cp -f feeds/smpackage/diy/index_x86.htm package/lean/autocore/files/x86/index.htm
        cp -f feeds/smpackage/diy/${{matrix.target}}.config .config && make defconfig
        
       
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Zip Files
      run: |
          #gzip openwrt/bin/targets/x86/64/*.img
          #zip -r openwrt-out.zip ./openwrt/bin/
          zip -r openwrt.zip ./openwrt/
    - name: Assemble Artifact
      id: assemble_artifact
      run: |
        rm -rf ./artifact/
        mkdir -p ./artifact/
        #mv openwrt-out.zip  ./artifact/
        #cd openwrt
        #make clean
        #cd ../        
        mv  openwrt.zip   ./artifact/
        #cp friendlywrt-rk3328/friendlywrt/.config ./artifact/
        zip -r artifact.zip ./artifact/
        release_tag="Lede-$(date +%Y-%m-%d-%H%M%S)"
        echo "##[set-output name=release_tag;]$release_tag"
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        #GITHUB_TOKEN: ${{ secrets.sec_token }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
        release_name: 发布 ${{ steps.assemble_artifact.outputs.release_tag }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        #GITHUB_TOKEN: ${{ secrets.sec_token }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./artifact.zip
        asset_name: ${{ steps.assemble_artifact.outputs.release_tag }}.zip
        asset_content_type: application/zip

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "::set-output name=status::success"
        
    - name : Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: OpenWrt
        path: openwrt/bin
